// Author: Ivan Zvonkov
// Description: Estimate area for Darfur region

// Configuration
var imgFolder = "users/hkerner_umd/Sudan/"
var imgName = "Darfur2023_cropmask_v5"
var img = ee.Image(imgFolder + imgName)
var isRegionSplit = false
var assetName = "GedarefDarfurAlJazirah2023_v2"

var debug = 0
var assetFolder = "users/izvonkov/Sudan/"
var assetPath = assetFolder + assetName
print("Map: " + imgName)
print("Set: " + assetName)

// 1. ROI
var rois = ee.FeatureCollection("projects/ee-gmuhawenayo/assets/rois")
var border = rois.filter(ee.Filter.inList('NAME_1', ee.List(["Central Darfur", "West Darfur", "South Darfur"])))


var roiDict = {
  "Central": rois.filter('NAME_1 == "Central Darfur"').geometry(),
  "West": rois.filter('NAME_1 == "West Darfur"').geometry(),
  "South": rois.filter('NAME_1 == "South Darfur"').geometry()
}

var roi = border.geometry()
Map.centerObject(roi, 7)


if (debug > 0){
  print("Area (ha)", roi.area().divide(10000))
}

// 2. Color Palettes
var palettes = require('users/gena/packages:palettes');
var classVis = {palette: palettes.cmocean.Speed[7].slice(0,-2)}
var classVis2 = {min: 0, max: 1.0, palette: ['yellow', 'green'], opacity: 0.8}

// 3. Display maps
img = img.clip(border);
var mask = img.gt(0.5)
Map.addLayer(img, classVis, imgName + ' Float')
Map.addLayer(mask.selfMask(), classVis2, imgName + ' Mask')

// 4. Pixel Count Crop Area Estimate
var cropPixels = {}
var nonCropPixels = {}
for (var key in roiDict){
  var args = {
      reducer: ee.Reducer.sum().unweighted(),
      geometry: roiDict[key],
      crs: "EPSG:32635",
      scale: 10,
      //crsTransform: [9.905300029869968, 0.0, 64773.159401580895, 0.0, -9.905300029869968, 1453259.3678092293],
      maxPixels: 1e12,
  }
  cropPixels[key] = ee.Number(mask.reduceRegion(args).get("classification"))
  nonCropPixels[key] = ee.Number(mask.not().reduceRegion(args).get("classification"))
  if (debug > 0){
    print("Crop Pixel Count:", cropPixels[key])
    print("Non-crop Pixel Count:", nonCropPixels[key])
  }
  // TODO double check this conversion
  var pixelBasedCropArea = cropPixels[key].divide(10e7)
  print(key + " Pixel Count Crop Area Estimate (Mha) ", pixelBasedCropArea)
}

var allReferenceSamples = ee.FeatureCollection(assetPath)

// 5. Sample Based Crop Area Estimate
for (var key in roiDict){
  var referenceSamples = allReferenceSamples.filterBounds(roiDict[key])
  var cropSamples = referenceSamples.filter("label == 1")
  var cropProportion = cropSamples.size().divide(referenceSamples.size())
  var totalPixels = cropPixels[key].add(nonCropPixels[key])
  if (debug > 0){
    print("Total Pixels:", totalPixels)
    print("Reference Crop Proportion", cropProportion)
  }
  var totalArea = totalPixels.divide(10e7)

  // 6. Prepare values for equation
  var testSamples = referenceSamples
  // if (isRegionSplit == false){
  //   testSamples = referenceSamples.filter(ee.Filter.or(
  //     ee.Filter.eq("subset", "testing"),
  //     ee.Filter.eq("subset", "validation")
  //   ))
  // }

  // Get map classification
  testSamples = mask.sampleRegions({collection: testSamples, scale: 10})

  var W_0 = nonCropPixels[key].divide(totalPixels)
  var W_1 = cropPixels[key].divide(totalPixels)

  var n_0_ = testSamples.filter("classification == 0").size()
  var n_1_ = testSamples.filter("classification == 1").size()

  var n_01 = testSamples.filter("classification == 0").filter("label == 1").size()
  var n_11 = testSamples.filter("classification == 1").filter("label == 1").size()
  var p_01 = W_0.multiply(n_01.divide(n_0_))
  var p_11 = W_1.multiply(n_11.divide(n_1_))

  // 7. Compute Area Estimate
  var adjustedCropProportion = (
      W_0.multiply(n_01.divide(n_0_)))
    .add(
      W_1.multiply(n_11.divide(n_1_))
    )
  var sampleBasedCropArea = adjustedCropProportion.multiply(totalArea)
  print(key + " Sample Based Crop Area Estimate (Mha) ", sampleBasedCropArea)

  // 7. Compute Confidence interval
  var numerator0 = (W_0.multiply(p_01)).subtract(p_01.pow(ee.Number(2)))
  var numerator1 = (W_1.multiply(p_11)).subtract(p_11.pow(ee.Number(2)))
  var denominator0 = n_0_.subtract(ee.Number(1))
  var denominator1 = n_1_.subtract(ee.Number(1))

  var sum0 = numerator0.divide(denominator0)
  var sum1 = numerator1.divide(denominator1)

  var standardError = (sum0.add(sum1)).sqrt()
  var standardErrorArea = totalArea.multiply(standardError)
  var confidenceInterval = ee.Number(1.96).multiply(standardErrorArea)
  print(key + " 95% Confidence Interval", confidenceInterval)

}
